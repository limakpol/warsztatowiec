<?php

namespace AppBundle\Entity\Repository;
use AppBundle\Entity\Good;
use AppBundle\Entity\Indexx;
use AppBundle\Entity\Workshop;
use Doctrine\ORM\Query;

/**
 * OrderIndexxRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class OrderIndexxRepository extends \Doctrine\ORM\EntityRepository
{

    public function getOne(Workshop $workshop, $id, $hydrationMode = Query::HYDRATE_OBJECT)
    {
        $orderIndexx = $this->_em
            ->createQueryBuilder()
            ->select('i')
            ->from('AppBundle:OrderIndexx', 'i')
            ->leftJoin('AppBundle:OrderHeader', 'o', 'WITH', 'i.order_header_id = o.id')
            ->where('o.deleted_at IS NULL')
            ->andWhere('o.removed_at IS NULL')
            ->where('i.deleted_at IS NULL')
            ->andWhere('i.removed_at IS NULL')
            ->andWhere('o.workshop = :workshop')
            ->andWhere('i.id = :id')
            ->setParameters([
                ':workshop' => $workshop,
                ':id'       => $id,
            ])
            ->getQuery()
            ->getOneOrNullResult($hydrationMode)
        ;

        return $orderIndexx;
    }


    public function getByIndexx(Workshop $workshop, Indexx $indexx)
    {
        $orderIndexxes = $this->_em->createQueryBuilder()
            ->select('i')
            ->from('AppBundle:OrderIndexx', 'i')
            ->innerJoin('AppBundle:OrderHeader', 'h', 'WITH', 'i.order_header_id = h.id')
            ->where('i.removed_at IS NULL')
            ->andWhere('i.removed_at IS NULL')
            ->andWhere('h.removed_at IS NULL')
            ->andWhere('h.deleted_at IS NULL')
            ->andWhere('h.workshop = :workshop')
            ->andWhere('i.indexx = :indexx')
            ->setParameters([
                ':workshop' => $workshop,
                ':indexx' => $indexx,
            ])
            ->orderBy('i.updated_at', 'DESC')
            ->getQuery()
            ->getResult()
        ;

        return $orderIndexxes;
    }

    public function getByGood(Workshop $workshop, Good $good)
    {
        $orderIndexxes = $this->_em->createQueryBuilder()
            ->select('o')
            ->from('AppBundle:OrderIndexx', 'o')
            ->innerJoin('AppBundle:OrderHeader', 'h', 'WITH', 'o.order_header_id = h.id')
            ->innerJoin('AppBundle:Indexx', 'i', 'WITH', 'o.indexx_id = i.id')
            ->innerJoin('AppBundle:Good', 'g', 'WITH', 'i.good_id = g.id')
            ->where('o.removed_at IS NULL')
            ->andWhere('o.removed_at IS NULL')
            ->andWhere('h.removed_at IS NULL')
            ->andWhere('h.deleted_at IS NULL')
            ->andWhere('i.removed_at IS NULL')
            ->andWhere('i.deleted_at IS NULL')
            ->andWhere('h.workshop = :workshop')
            ->andWhere('i.good = :good')
            ->setParameters([
                ':workshop' => $workshop,
                ':good' => $good,
            ])
            ->orderBy('o.updated_at', 'DESC')
            ->getQuery()
            ->getResult()
        ;

        return $orderIndexxes;
    }
}
