<?php

namespace AppBundle\Entity\Repository;
use AppBundle\Entity\Workshop;

/**
 * CarModelRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CarModelRepository extends \Doctrine\ORM\EntityRepository
{
    public function getOne(Workshop $workshop, $id)
    {
        $carModel = $this->_em->createQueryBuilder()
            ->select('c')
            ->from('AppBundle:CarModel', 'c')
            ->innerJoin('AppBundle:CarBrand', 'b', 'WITH', 'c.brand_id = b.id')
            ->where('c.removed_at IS NULL')
            ->andWhere('c.deleted_at IS NULL')
            ->andWhere('b.deleted_at IS NULL')
            ->andWhere('b.removed_at IS NULL')
            ->andWhere('b.workshop = :workshop')
            ->andWhere('c.id = :id')
            ->setParameters([
                ':workshop' => $workshop,
                ':id'       => $id,
            ])
            ->getQuery()
            ->getOneOrNullResult()
        ;

        return $carModel;
    }

    public function retrieveByBrandId(Workshop $workshop, $brandId)
    {
        $carModels = $this->_em->createQueryBuilder()
            ->select('c')
            ->from('AppBundle:CarModel', 'c')
            ->leftJoin('AppBundle:CarBrand', 'b', 'WITH', 'c.brand_id = b.id')
            ->where('c.removed_at IS NULL')
            ->andWhere('c.deleted_at IS NULL')
            ->andWhere('b.deleted_at IS NULL')
            ->andWhere('b.removed_at IS NULL')
            ->andWhere('b.workshop = :workshop')
            ->andWhere('b.id = :brandId')
            ->setParameters([
                ':workshop' => $workshop,
                ':brandId'  => $brandId,
            ])
            ->getQuery()
            ->getResult()
        ;

        return $carModels;
    }

    public function getOneByName(Workshop $workshop, $name)
    {
        $carModel = $this->_em->createQueryBuilder()
            ->select('c')
            ->from('AppBundle:CarModel', 'c')
            ->innerJoin('AppBundle:CarBrand', 'b', 'WITH', 'c.brand_id = b.id')
            ->where('c.removed_at IS NULL')
            ->andWhere('c.deleted_at IS NULL')
            ->andWhere('b.deleted_at IS NULL')
            ->andWhere('b.removed_at IS NULL')
            ->andWhere('b.workshop = :workshop')
            ->andWhere('b.name = :name')
            ->setParameters([
                ':workshop' => $workshop,
                ':name'     => $name,
            ])
            ->getQuery()
            ->getOneOrNullResult()
        ;

        return $carModel;
    }

    public function getOneRemovedByName(Workshop $workshop, $name)
    {
        $carModel = $this->_em->createQueryBuilder()
            ->select('c')
            ->from('AppBundle:CarModel', 'c')
            ->innerJoin('AppBundle:CarBrand', 'b', 'WITH', 'c.brand_id = b.id')
            ->where('c.removed_at IS NOT NULL OR c.deleted_at IS NOT NULL')
            ->andWhere('b.workshop = :workshop')
            ->andWhere('c.name = :name')
            ->setParameters([
                ':workshop' => $workshop,
                ':name'     => $name,
            ])
            ->getQuery()
            ->getOneOrNullResult()
        ;

        return $carModel;
    }

    public function getOthersSimilar(Workshop $workshop, $name, $id)
    {
        $carModels = $this->_em->createQueryBuilder()
            ->select('c')
            ->from('AppBundle:CarModel', 'c')
            ->innerJoin('AppBundle:CarBrand', 'b', 'WITH', 'c.brand_id = b.id')
            ->where('b.workshop = :workshop')
            ->andWhere('c.removed_at IS NULL OR c.deleted_at IS NULL')
            ->andWhere('c.name = :name')
            ->andWhere('c.id != :id')
            ->setParameters([
                ':workshop' => $workshop,
                ':name'     => $name,
                ':id'       => $id,
            ])
            ->getQuery()
            ->getResult()
        ;

        return $carModels;
    }
}
