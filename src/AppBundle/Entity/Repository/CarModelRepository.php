<?php

namespace AppBundle\Entity\Repository;
use AppBundle\Entity\Workshop;

/**
 * CarModelRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CarModelRepository extends \Doctrine\ORM\EntityRepository
{
    public function getOne(Workshop $workshop, $id)
    {
        $carModel = $this->_em->createQueryBuilder()
            ->select('m')
            ->from('AppBundle:CarModel', 'm')
            ->innerJoin('AppBundle:CarBrand', 'b', 'WITH', 'm.brand_id = b.id')
            ->where('m.removed_at IS NULL')
            ->andWhere('m.deleted_at IS NULL')
            ->andWhere('b.deleted_at IS NULL')
            ->andWhere('b.removed_at IS NULL')
            ->andWhere('b.workshop = :workshop')
            ->andWhere('m.id = :id')
            ->setParameters([
                ':workshop' => $workshop,
                ':id'       => $id,
            ])
            ->getQuery()
            ->getOneOrNullResult()
        ;

        return $carModel;
    }

    public function retrieve(Workshop $workshop)
    {
        $carModels = $this->_em->createQueryBuilder()
            ->select('m')
            ->from('AppBundle:CarModel', 'm')
            ->leftJoin('AppBundle:CarBrand', 'b', 'WITH', 'm.brand_id = b.id')
            ->where('m.removed_at IS NULL')
            ->andWhere('m.deleted_at IS NULL')
            ->andWhere('b.deleted_at IS NULL')
            ->andWhere('b.removed_at IS NULL')
            ->andWhere('b.workshop = :workshop')
            ->setParameters([
                ':workshop' => $workshop,
            ])
            ->orderBy('b.name', 'ASC')
            ->getQuery()
            ->getResult()
        ;

        return $carModels;
    }

    public function retrieveByGoodId(Workshop $workshop, $goodIds = [])
    {
        $models = $this->_em->createQueryBuilder()
            ->select('m')
            ->from('AppBundle:CarModel', 'm')
            ->innerJoin('AppBundle:CarBrand', 'b', 'WITH', 'm.brand_id = b.id')
            ->innerJoin('m.goods', 'g')
            ->where('m.removed_at IS NULL')
            ->andWhere('m.deleted_at IS NULL')
            ->andWhere('b.workshop = :workshop')
            ->andWhere('g.id IN (:goodIds)')
            ->setParameters([
                ':workshop' => $workshop,
                ':goodIds' => $goodIds,
            ])
            ->getQuery()
            ->getResult()
        ;

        return $models;
    }

    public function retrieveByBrandId(Workshop $workshop, $brandId)
    {
        $carModels = $this->_em->createQueryBuilder()
            ->select('m')
            ->from('AppBundle:CarModel', 'm')
            ->leftJoin('AppBundle:CarBrand', 'b', 'WITH', 'm.brand_id = b.id')
            ->where('m.removed_at IS NULL')
            ->andWhere('m.deleted_at IS NULL')
            ->andWhere('b.deleted_at IS NULL')
            ->andWhere('b.removed_at IS NULL')
            ->andWhere('b.workshop = :workshop')
            ->andWhere('b.id = :brandId')
            ->setParameters([
                ':workshop' => $workshop,
                ':brandId'  => $brandId,
            ])
            ->orderBy('m.name', 'ASC')
            ->getQuery()
            ->getResult()
        ;

        return $carModels;
    }

    public function getOneByName(Workshop $workshop, $name)
    {
        $carModel = $this->_em->createQueryBuilder()
            ->select('m')
            ->from('AppBundle:CarModel', 'm')
            ->innerJoin('AppBundle:CarBrand', 'b', 'WITH', 'm.brand_id = b.id')
            ->where('m.removed_at IS NULL')
            ->andWhere('m.deleted_at IS NULL')
            ->andWhere('b.deleted_at IS NULL')
            ->andWhere('b.removed_at IS NULL')
            ->andWhere('b.workshop = :workshop')
            ->andWhere('m.name = :name')
            ->setParameters([
                ':workshop' => $workshop,
                ':name'     => $name,
            ])
            ->getQuery()
            ->getOneOrNullResult()
        ;

        return $carModel;
    }

    public function getOneRemovedByName(Workshop $workshop, $name)
    {
        $carModel = $this->_em->createQueryBuilder()
            ->select('m')
            ->from('AppBundle:CarModel', 'm')
            ->innerJoin('AppBundle:CarBrand', 'b', 'WITH', 'm.brand_id = b.id')
            ->where('m.removed_at IS NOT NULL OR m.deleted_at IS NOT NULL')
            ->andWhere('b.workshop = :workshop')
            ->andWhere('m.name = :name')
            ->setParameters([
                ':workshop' => $workshop,
                ':name'     => $name,
            ])
            ->getQuery()
            ->getOneOrNullResult()
        ;

        return $carModel;
    }

    public function getOthersSimilar(Workshop $workshop, $name, $id)
    {
        $carModels = $this->_em->createQueryBuilder()
            ->select('m')
            ->from('AppBundle:CarModel', 'm')
            ->innerJoin('AppBundle:CarBrand', 'b', 'WITH', 'm.brand_id = b.id')
            ->where('b.workshop = :workshop')
            ->andWhere('m.removed_at IS NULL OR m.deleted_at IS NULL')
            ->andWhere('m.name = :name')
            ->andWhere('m.id != :id')
            ->setParameters([
                ':workshop' => $workshop,
                ':name'     => $name,
                ':id'       => $id,
            ])
            ->getQuery()
            ->getResult()
        ;

        return $carModels;
    }
}
