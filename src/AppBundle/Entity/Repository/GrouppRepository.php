<?php

namespace AppBundle\Entity\Repository;
use AppBundle\Entity\Customer;
use AppBundle\Entity\Groupp;
use AppBundle\Entity\Workshop;

/**
 * GrouppRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class GrouppRepository extends \Doctrine\ORM\EntityRepository
{
    public function getOne(Workshop $workshop, $id)
    {
        $group = $this->_em->createQueryBuilder()
            ->select('g')
            ->from('AppBundle:Groupp', 'g')
            ->where('g.removed_at IS NULL')
            ->andWhere('g.deleted_at IS NULL')
            ->andWhere('g.workshop = :workshop')
            ->andWhere('g.id = :id')
            ->setParameters([
                ':workshop' => $workshop,
                ':id'       => $id,
            ])
            ->getQuery()
            ->getOneOrNullResult()
        ;

        return $group;
    }

    public function retrieve(Workshop $workshop)
    {
        $groups = $this->_em->createQueryBuilder()
            ->select('g')
            ->from('AppBundle:Groupp', 'g')
            ->where('g.removed_at IS NULL')
            ->andWhere('g.deleted_at IS NULL')
            ->andWhere('g.workshop = :workshop')
            ->setParameters([
                ':workshop' => $workshop,
            ])
            ->getQuery()
            ->getResult()
        ;

        return $groups;
    }


    public function retrieveByCustomerId(Workshop $workshop, $customerId, $hydrationMode = 'array')
    {
        /** @var Customer $customer */
        $customer = $this->_em->createQueryBuilder()
            ->select('c')
            ->from('AppBundle:Customer', 'c')
            ->where('c.removed_at IS NULL')
            ->andWhere('c.deleted_at IS NULL')
            ->andWhere('c.workshop = :workshop')
            ->andWhere('c.id = :customerId')
            ->setParameters([
                ':workshop' => $workshop,
                ':customerId' => $customerId,
            ])
            ->getQuery()
            ->getOneOrNullResult()
        ;

        $groupps = $customer->getGroupps()->filter(function(Groupp $groupp){
            return null === $groupp->getRemovedAt() && null === $groupp->getDeletedAt();
        });

        if($hydrationMode == 'array')
        {
            $grouppNames = [];

            /** @var Groupp $groupp */
            foreach($groupps as $groupp)
            {
                $grouppNames[] = $groupp->getName();
            }

            return $grouppNames;
        }

        return $groupps;
    }


    public function getOneByName(Workshop $workshop, $name)
    {
        $group = $this->_em->createQueryBuilder()
            ->select('g')
            ->from('AppBundle:Groupp', 'g')
            ->where('g.removed_at IS NULL')
            ->andWhere('g.deleted_at IS NULL')
            ->andWhere('g.workshop = :workshop')
            ->andWhere('g.name = :name')
            ->setParameters([
                ':workshop' => $workshop,
                ':name'     => $name,
            ])
            ->getQuery()
            ->getOneOrNullResult()
        ;

        return $group;
    }

    public function getOneRemovedByName(Workshop $workshop, $name)
    {
        $group = $this->_em->createQueryBuilder()
            ->select('g')
            ->from('AppBundle:Groupp', 'g')
            ->where('g.removed_at IS NOT NULL OR g.deleted_at IS NOT NULL')
            ->andWhere('g.workshop = :workshop')
            ->andWhere('g.name = :name')
            ->setParameters([
                ':workshop' => $workshop,
                ':name'     => $name,
            ])
            ->getQuery()
            ->getOneOrNullResult()
        ;

        return $group;
    }
}
