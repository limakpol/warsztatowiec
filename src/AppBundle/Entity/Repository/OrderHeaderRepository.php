<?php

namespace AppBundle\Entity\Repository;
use AppBundle\Entity\Customer;
use AppBundle\Entity\User;
use AppBundle\Entity\Vehicle;
use AppBundle\Entity\Workshop;
use Doctrine\ORM\Query;

/**
 * OrderHeaderRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class OrderHeaderRepository extends \Doctrine\ORM\EntityRepository
{
    public function getCountMonthly(Workshop $workshop)
    {
        $count = $this->_em->createQueryBuilder()
            ->select('COUNT(o)')
            ->from('AppBundle:OrderHeader', 'o')
            ->where('o.workshop = :workshop')
            ->andWhere('o.removed_at IS NULL')
            ->andWhere('o.deleted_at IS NULL')
            ->andWhere('MONTH(o.created_at) = :month')
            ->setParameters([
                ':workshop' => $workshop,
                ':month' => date('m')
            ])
            ->getQuery()
            ->getSingleScalarResult()
        ;

        return $count;
    }

    public function getCountYearly(Workshop $workshop)
    {
        $count = $this->_em->createQueryBuilder()
            ->select('COUNT(o)')
            ->from('AppBundle:OrderHeader', 'o')
            ->where('o.workshop = :workshop')
            ->andWhere('o.removed_at IS NULL')
            ->andWhere('o.deleted_at IS NULL')
            ->andWhere('YEAR(o.created_at) = :year')
            ->setParameters([
                ':workshop' => $workshop,
                ':year' => date('Y')
            ])
            ->getQuery()
            ->getSingleScalarResult()
        ;

        return $count;
    }
    
    public function getOne(Workshop $workshop, $id, $hydrationMode = Query::HYDRATE_OBJECT)
    {
        $orderHeader = $this->_em
            ->createQueryBuilder()
            ->select('o')
            ->from('AppBundle:OrderHeader', 'o')
            ->where('o.deleted_at IS NULL')
            ->andWhere('o.removed_at IS NULL')
            ->andWhere('o.workshop = :workshop')
            ->andWhere('o.id = :id')
            ->setParameters([
                ':workshop' => $workshop,
                ':id'       => $id,
            ])
            ->getQuery()
            ->getOneOrNullResult($hydrationMode)
        ;

        return $orderHeader;
    }

    public function retrieve(Workshop $workshop, $sortableParameters = [])
    {
        $search     = $sortableParameters['search'];
        $limit      = (int) $sortableParameters['limit'];
        $offset     = (int) $sortableParameters['offset'];
        $sortOrder  = $sortableParameters['sortOrder'];
        $sortColumnName = $sortableParameters['sortColumnName'];
        $systemFilters  = $sortableParameters['systemFilters'];
        $customFilters  = $sortableParameters['customFilters'];

        $queryBuilder = $this->_em
            ->createQueryBuilder()
            ->select('o')
            ->from('AppBundle:OrderHeader', 'o')
            ->leftJoin('AppBundle:Customer', 'c', 'WITH', 'o.customer_id = c.id')
            ->leftJoin('AppBundle:Address', 'a', 'WITH', 'c.address_id = a.id')
            ->leftJoin('AppBundle:Province', 'p', 'WITH', 'a.province_id = p.id')
            ->leftJoin('AppBundle:Vehicle', 'v', 'WITH', 'o.vehicle_id = v.id')
            ->leftJoin('AppBundle:CarModel', 'm', 'WITH', 'v.car_model_id = m.id')
            ->leftJoin('AppBundle:CarBrand', 'b', 'WITH', 'm.brand_id = b.id')
            ->leftJoin('o.statuses', 's')
        ;

        if(count($customFilters) > 0)
        {
            $queryBuilder
                ->where('s.id IN (:statusIds)')
                ->andWhere('s.deleted_at IS NULL')
                ->andWhere('s.removed_at IS NULL')
                ->setParameter(':statusIds', $customFilters)
            ;
        }

        $orderHeaders = $queryBuilder
            ->andWhere('o.deleted_at IS NULL')
            ->andWhere('o.removed_at IS NULL')
            ->andWhere('o.workshop = :workshop')
            ->andWhere("
                    CONCAT_WS(' ', c.forename, c.surname, c.company_name) LIKE :search
                OR  CONCAT_WS(' ', a.street, a.house_number, a.flat_number, a.post_code, a.city, p.name) LIKE :search
                OR  CONCAT_WS(' ', c.mobile_phone1, c.mobile_phone2, c.landline_phone, c.email) LIKE :search
                OR  CONCAT_WS(' ', c.nip, c.pesel, c.bank_account_number) LIKE :search
                OR  CONCAT_WS(' ', c.contact_person, c.remarks) LIKE :search
                OR  CONCAT_WS(' ', b.name, m.name, v.version) LIKE :search
                OR  CONCAT_WS(' ', v.vin, v.registration_number, v.remarks) LIKE :search
                OR  o.remarks LIKE :search
                OR s.name LIKE :search
            ")
            ->orderBy($sortColumnName, $sortOrder)
            ->addOrderBy('o.updated_at', 'DESC')
            ->setFirstResult($offset)
            ->setMaxResults($limit)
            ->groupBy('o.id')
            ->setParameter(':workshop', $workshop)
            ->setParameter(':search', '%' . $search . '%')
            ->getQuery()
            ->getResult()
        ;

        return $orderHeaders;
    }

    public function getCountAllRetrieved(Workshop $workshop, $sortableParameters = [])
    {
        $search     = $sortableParameters['search'];
        $sortOrder  = $sortableParameters['sortOrder'];
        $sortColumnName = $sortableParameters['sortColumnName'];
        $systemFilters  = $sortableParameters['systemFilters'];
        $customFilters  = $sortableParameters['customFilters'];

        $queryBuilder = $this->_em
            ->createQueryBuilder()
            ->select('COUNT(DISTINCT o)')
            ->from('AppBundle:OrderHeader', 'o')
            ->leftJoin('AppBundle:Customer', 'c', 'WITH', 'o.customer_id = c.id')
            ->leftJoin('AppBundle:Address', 'a', 'WITH', 'c.address_id = a.id')
            ->leftJoin('AppBundle:Province', 'p', 'WITH', 'a.province_id = p.id')
            ->leftJoin('AppBundle:Vehicle', 'v', 'WITH', 'o.vehicle_id = v.id')
            ->leftJoin('AppBundle:CarModel', 'm', 'WITH', 'v.car_model_id = m.id')
            ->leftJoin('AppBundle:CarBrand', 'b', 'WITH', 'm.brand_id = b.id')
            ->leftJoin('o.statuses', 's')
        ;

        if(count($customFilters) > 0)
        {
            $queryBuilder
                ->where('s.id IN (:statusIds)')
                ->andWhere('s.deleted_at IS NULL')
                ->andWhere('s.removed_at IS NULL')
                ->setParameter(':statusIds', $customFilters)
            ;
        }

        $countOrderHeaders = $queryBuilder
            ->andWhere('o.deleted_at IS NULL')
            ->andWhere('o.removed_at IS NULL')
            ->andWhere('o.workshop = :workshop')
            ->andWhere("
                    CONCAT_WS(' ', c.forename, c.surname, c.company_name) LIKE :search
                OR  CONCAT_WS(' ', a.street, a.house_number, a.flat_number, a.post_code, a.city, p.name) LIKE :search
                OR  CONCAT_WS(' ', c.mobile_phone1, c.mobile_phone2, c.landline_phone, c.email) LIKE :search
                OR  CONCAT_WS(' ', c.nip, c.pesel, c.bank_account_number) LIKE :search
                OR  CONCAT_WS(' ', c.contact_person, c.remarks) LIKE :search
                OR  CONCAT_WS(' ', b.name, m.name, v.version) LIKE :search
                OR  CONCAT_WS(' ', v.vin, v.registration_number, v.remarks) LIKE :search
                OR  o.remarks LIKE :search
                OR s.name LIKE :search
            ")
            ->orderBy($sortColumnName, $sortOrder)
            ->addOrderBy('o.updated_at', 'DESC')
            ->setParameter(':workshop', $workshop)
            ->setParameter(':search', '%' . $search . '%')
            ->getQuery()
            ->getSingleScalarResult()
        ;

        return $countOrderHeaders;
    }

    public function retrieveByCustomer(Workshop $workshop, Customer $customer)
    {
        $orderHeaders = $this->_em
            ->createQueryBuilder()
            ->select('o')
            ->from('AppBundle:OrderHeader', 'o')
            ->innerJoin('AppBundle:Customer', 'c', 'WITH', 'o.customer_id = c.id')
            ->where('o.removed_at IS NULL')
            ->andWhere('o.deleted_at IS NULL')
            ->andWhere('o.workshop = :workshop')
            ->andWhere('c.id IN (:customerIds)')
            ->setParameters([
                ':workshop' => $workshop,
                ':customerIds' => [$customer->getId()],
            ])
            ->getQuery()
            ->getResult()
        ;

        return $orderHeaders;
    }

    public function retrieveByVehicle(Workshop $workshop, Vehicle $vehicle)
    {
        $orderHeaders = $this->_em
            ->createQueryBuilder()
            ->select('o')
            ->from('AppBundle:OrderHeader', 'o')
            ->innerJoin('AppBundle:Vehicle', 'v', 'WITH', 'o.vehicle_id = v.id')
            ->where('o.removed_at IS NULL')
            ->andWhere('o.deleted_at IS NULL')
            ->andWhere('o.workshop = :workshop')
            ->andWhere('v.id IN (:vehicleIds)')
            ->setParameters([
                ':workshop' => $workshop,
                ':vehicleIds' => [$vehicle->getId()],
            ])
            ->getQuery()
            ->getResult()
        ;

        return $orderHeaders;
    }

    public function retrieveByWorkman(Workshop $workshop, User $workman)
    {
        $orderHeaders = $this->_em
            ->createQueryBuilder()
            ->select('o')
            ->from('AppBundle:OrderHeader', 'o')
            ->leftJoin('AppBundle:OrderService', 's', 'WITH', 's.order_header_id = o.id')
            ->leftJoin('AppBundle:OrderIndexx', 'i', 'WITH', 'i.order_header_id = o.id')
            ->leftJoin('AppBundle:OrderAction', 'a', 'WITH', 'a.order_indexx_id = i.id')
            ->leftJoin('s.workmans', 'w1')
            ->where('o.removed_at IS NULL')
            ->andWhere('o.deleted_at IS NULL')
            ->andWhere('s.removed_at IS NULL')
            ->andWhere('s.deleted_at IS NULL')
            ->andWhere('i.removed_at IS NULL')
            ->andWhere('i.deleted_at IS NULL')
            ->andWhere('a.removed_at IS NULL')
            ->andWhere('a.deleted_at IS NULL')
            ->andWhere('o.workshop = :workshop')
            ->andWhere('w1.id IN (:workmanIds)')
            ->setParameters([
                ':workshop' => $workshop,
                ':workmanIds' => [$workman->getId()],
            ])
            ->getQuery()
            ->getResult()
        ;

        return $orderHeaders;
    }
}
