<?php

namespace AppBundle\Entity\Repository;
use AppBundle\Entity\Workshop;
use Doctrine\ORM\Query;

/**
 * ServiceRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ServiceRepository extends \Doctrine\ORM\EntityRepository
{
    public function getOne(Workshop $workshop, $id, $hydrationMode = Query::HYDRATE_OBJECT)
    {
        $service = $this->_em->createQueryBuilder()
            ->select('s')
            ->from('AppBundle:Service', 's')
            ->where('s.removed_at IS NULL')
            ->andWhere('s.deleted_at IS NULL')
            ->andWhere('s.workshop = :workshop')
            ->andWhere('s.id = :id')
            ->setParameters([
                ':workshop' => $workshop,
                ':id'       => $id,
            ])
            ->getQuery()
            ->getOneOrNullResult($hydrationMode)
        ;

        return $service;
    }

    public function getServices(Workshop $workshop)
    {
        $service = $this->_em->createQueryBuilder()
            ->select('s')
            ->from('AppBundle:Service', 's')
            ->where('s.removed_at IS NULL')
            ->andWhere('s.deleted_at IS NULL')
            ->andWhere('s.workshop = :workshop')
            ->setParameters([
                ':workshop' => $workshop,
            ])
            ->getQuery()
            ->getResult()
        ;

        return $service;
    }


    public function retrieve(Workshop $workshop, $sortableParameters = [])
    {
        $search     = $sortableParameters['search'];
        $limit      = (int) $sortableParameters['limit'];
        $offset     = (int) $sortableParameters['offset'];
        $sortOrder  = $sortableParameters['sortOrder'];
        $sortColumnName     = $sortableParameters['sortColumnName'];

        $services = $queryBuilder = $this->_em
            ->createQueryBuilder()
            ->select('s')
            ->from('AppBundle:Service', 's')
            ->leftJoin('AppBundle:Measure', 'm', 'WITH', 's.measure_id = m.id')
            ->where('s.deleted_at IS NULL')
            ->andWhere('s.removed_at IS NULL')
            ->andWhere('s.workshop = :workshop')
            ->andWhere("
                    s.name LIKE :search
                OR  m.name LIKE :search
                OR  m.shortcut LIKE :search
                OR  s.remarks LIKE :search
            ")
            ->orderBy($sortColumnName, $sortOrder)
            ->addOrderBy('s.updated_at', 'DESC')
            ->setFirstResult($offset)
            ->setMaxResults($limit)
            ->groupBy('s.id')
            ->setParameter(':workshop', $workshop)
            ->setParameter(':search', '%' . $search . '%')
            ->getQuery()
            ->getResult()
        ;

        return $services;
    }

    public function getCountAllRetrieved(Workshop $workshop, $sortableParameters = [])
    {
        $search     = $sortableParameters['search'];
        $sortOrder  = $sortableParameters['sortOrder'];
        $sortColumnName = $sortableParameters['sortColumnName'];

        $countServices = $queryBuilder = $this->_em
            ->createQueryBuilder()
            ->select('COUNT(DISTINCT s)')
            ->from('AppBundle:Service', 's')
            ->leftJoin('AppBundle:Measure', 'm', 'WITH', 's.measure_id = m.id')
            ->where('s.deleted_at IS NULL')
            ->andWhere('s.removed_at IS NULL')
            ->andWhere('s.workshop = :workshop')
            ->andWhere("
                    s.name LIKE :search
                OR  m.name LIKE :search
                OR  m.shortcut LIKE :search
                OR  s.remarks LIKE :search
            ")
            ->orderBy($sortColumnName, $sortOrder)
            ->addOrderBy('s.updated_at', 'DESC')
            ->setParameter(':workshop', $workshop)
            ->setParameter(':search', '%' . $search . '%')
            ->getQuery()
            ->getSingleScalarResult()
        ;

        return $countServices;
    }

    public function getOneByName(Workshop $workshop, $name)
    {
        $service = $this->_em->createQueryBuilder()
            ->select('s')
            ->from('AppBundle:Service', 's')
            ->where('s.removed_at IS NULL')
            ->andWhere('s.deleted_at IS NULL')
            ->andWhere('s.workshop = :workshop')
            ->andWhere('s.name = :name')
            ->setParameters([
                ':workshop' => $workshop,
                ':name'     => $name,
            ])
            ->getQuery()
            ->getOneOrNullResult()
        ;

        return $service;
    }

    public function getOneRemovedByName(Workshop $workshop, $name)
    {
        $service = $this->_em->createQueryBuilder()
            ->select('s')
            ->from('AppBundle:Service', 's')
            ->where('s.removed_at IS NOT NULL OR s.deleted_at IS NOT NULL')
            ->andWhere('s.workshop = :workshop')
            ->andWhere('s.name = :name')
            ->setParameters([
                ':workshop' => $workshop,
                ':name'     => $name,
            ])
            ->getQuery()
            ->getOneOrNullResult()
        ;

        return $service;
    }


}
